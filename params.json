{"name":"ls-archive","tagline":"Node module for archive files","body":"# Node Ls Archive Module [![Build Status](https://travis-ci.org/atom/node-ls-archive.png)](https://travis-ci.org/atom/node-ls-archive)\r\n\r\nList or read the files and folders inside archive files.\r\n\r\nSupported file extensions:\r\n\r\n  * .jar\r\n  * .tar\r\n  * .tar.gz\r\n  * .tgz\r\n  * .zip\r\n\r\n## Installing\r\n\r\n```sh\r\nnpm install ls-archive\r\n```\r\n\r\n## Building\r\n  * Clone the repository\r\n  * Run `npm install`\r\n  * Run `grunt` to compile CoffeeScript code\r\n  * Run `grunt test` to run the specs\r\n\r\n## Docs\r\n\r\n```coffeescript\r\narchive = require 'ls-archive'\r\n```\r\n\r\n### archive.list(archivePath, callback)\r\n\r\nList the files and folders inside the archive file path. The `callback` gets\r\ntwo arguments `(error, archiveEntries)`.\r\n\r\n`archivePath` - The string path to the archive file.\r\n\r\n`callback` - The function to call after reading completes with an error or\r\nan array of archive entries.\r\n\r\n### archive.read(archivePath, filePath, callback)\r\n\r\nRead the contents of the file path in the archive path and invoke the callback\r\nwith those contents. The `callback` gets two arguments\r\n`(error, filePathContents)`.\r\n\r\n`archivePath` - The string path to the archive file.\r\n\r\n`filePath` - The string path inside the archive to read.\r\n\r\n`callback` - The function to call after reading completes with an error or\r\nthe string contents.\r\n\r\n### archive.readGzip(gzipArchivePath, callback)\r\n\r\nRead the contents of the gzipped archive path and invoke the callback with the\r\nstring contents of the uncompressed paths.  The `callback` gets two arguments\r\n`(error, pathContents)`.\r\n\r\n`gzipArchivePath` - The string path to the gzipped archive file.\r\n\r\n`callback` - The function to call after reading completes with an error or\r\nthe string contents.\r\n\r\n### ArchiveEntry\r\n\r\nClass representing a path entry inside an archive file.\r\n\r\n#### .isFile()\r\nIs the entry a file?\r\n\r\nReturns `true` if a file, `false` otherwise.\r\n\r\n#### .isFolder()\r\nIs the entry a folder?\r\n\r\nReturns `true` if a folder, `false` otherwise.\r\n\r\n#### .isSymbolicLink()\r\nIs the entry a symbolic link?\r\n\r\nReturns `true` if a symbolic link, `false` otherwise.\r\n\r\n#### .getPath()\r\nGet the path of this entry.\r\n\r\nReturns the string path.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}